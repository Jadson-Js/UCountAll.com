{"version":3,"sources":["webpack://tempoMedido5/./src/js/conversor/main.js","webpack://tempoMedido5/./src/js/intervalo/formula.js","webpack://tempoMedido5/./src/js/intervalo/Central.js","webpack://tempoMedido5/./src/js/intervalo/main.js","webpack://tempoMedido5/./src/js/feriado/next.js","webpack://tempoMedido5/./src/js/feriado/data.js","webpack://tempoMedido5/./src/js/feriado/main.js","webpack://tempoMedido5/./src/main.js","webpack://tempoMedido5/./src/js/conversor/formula.js","webpack://tempoMedido5/./src/js/conversor/data.js"],"names":["res","document","querySelector","months","formula","dateValue","summation","intervalYear","ad","month","Central","finalDate","value","split","initalDate","Date","getDate","getMonth","getFullYear","interD","interM","interY","push","interval","page","style","color","datetimeI","datetimeF","zero","positive","negative","neutre","innerHTML","central","proximo","currentDate","datas","this","holiday","holidayDate","indexOf","holidayData","req","date","data","holidayDates","key","next","holidaYear","addEventListener","e","originalUnit","quantityUnit","resultUnit","target","id","Number","unitData","t1","t2","conversor","produto","dadosFormatado","nanosecond","microsecond","millisecond","second","minute","hour","day","week","fortnight","bimester","quarter","semester","year","decade","century","millennium","medida","conversorNumerado","produtoNumerado","isInteger","Math","round","toFixed","autoDate","map","element","parseInt","timeline","response","event","preventDefault","counterPage","intervalPage","dayName","monthName","yearName","dateToHoliday","presentHoliday","options","text","futureHoliday","holidayPage"],"mappings":"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","file":"bundle.js","sourcesContent":["import formula from './formula.js' // ROTAS DANDO TUDO ERRADO\n\nconst res = document.querySelector('.body__result')\n\nexport default function conversionPage() {\n    let originalUnit = document.querySelector(\"#originalUnit\").value\n    let quantityUnit = document.querySelector(\"#quantityUnit\")\n    let resultUnit = document.querySelector(\"#resultUnit\").value\n\n    if (Number(quantityUnit.value) <= 0) {\n        quantityUnit.value = 1\n    }\n\n    if (originalUnit == \"\" || resultUnit == \"\") {\n        res.style.color = \"red\"\n        res.innerHTML = \"Choose an input and an output unit.\"\n    } else {\n        res.style.color = \"white\"\n        res.innerHTML = formula(originalUnit, Number(quantityUnit.value), resultUnit)\n    }\n};","const months = [0, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]   // os dias que cada mes tem\n\nexport default function formula(dateValue) {\n    let summation = 0   //  funcionara como acumulador\n\n    let intervalYear = dateValue[5] - dateValue[2]  //  intervalo entre os anos \n\n    for (let ad = dateValue[1]; ad < dateValue[4]; ad++) {  // percorrera os intervalo entre os months\n        summation += months[ad]  //  a cada mes ele irÃ¡ somar os dias de cada\n    }\n\n    // o intervalo dos anos sera multiplicado por 360\n    const grossResult = intervalYear * 365 + summation // e depois sera somado o variavel summation\n    const preparatory = dateValue[0] - dateValue[3] // ele vai ver o intervalo entre os dias      \n    const liquidResult = grossResult - preparatory  // e depois subtrair na const 'preparatorio\n\n    return liquidResult // e depois retornara o resultado\n}","const res = document.querySelector(\".body__result\")\nconst month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n\nexport default class Central {\n    autoDate() {\n        let finalDate = document.querySelector('.finalDate').value\n        finalDate = finalDate.split(\"-\")\n\n        const initalDate = new Date();\n\n        let dayI = initalDate.getDate();\n        let monthI = initalDate.getMonth() + 1;\n        let yearI = initalDate.getFullYear();\n\n        let dayF = finalDate[2]\n        let monthF = finalDate[1]\n        let yearF = finalDate[0]\n\n        return [dayI, monthI, yearI, dayF, monthF, yearF]\n    }\n\n    initalDate() {\n        let initalDate = document.querySelector('.initalDate').value\n        let finalDate = document.querySelector('.finalDate').value\n\n        initalDate = initalDate.split(\"-\")\n        finalDate = finalDate.split(\"-\")\n\n        let dayI = initalDate[2]\n        let monthI = initalDate[1]\n        let yearI = initalDate[0]\n\n        let dayF = finalDate[2]\n        let monthF = finalDate[1]\n        let yearF = finalDate[0]\n\n        return [dayI, monthI, yearI, dayF, monthF, yearF]\n    }\n\n    timeline(dateValue) {\n        if (dateValue[2] > dateValue[5] || dateValue[1] > dateValue[4] || dateValue[1] == dateValue[4] && dateValue[0] > dateValue[3]) { //  se ano passado for maior que o futuro    \n            let interD = dateValue[0]\n            let interM = dateValue[1]\n            let interY = dateValue[2]\n\n            dateValue[0] = dateValue[3]\n            dateValue[1] = dateValue[4]\n            dateValue[2] = dateValue[5]\n\n            dateValue[3] = interD\n            dateValue[4] = interM\n            dateValue[5] = interY\n\n            dateValue.push(true)\n\n            return dateValue\n        } else {\n            dateValue.push(false)\n            return dateValue\n        }\n    }\n\n    response(interval, dateValue, page) {\n        res.style.color = 'white'\n\n        if (interval < 0) interval *= (-1)\n        \n        const datetimeI = `<time datetime=\"${dateValue[2]}-${dateValue[1]}-${dateValue[0]}\">${month[dateValue[1] - 1]} ${dateValue[0]}, ${dateValue[2]}</time>`\n        const datetimeF = `<time datetime=\"${dateValue[5]}-${dateValue[4]}-${dateValue[3]}\">${month[dateValue[4] - 1]} ${dateValue[3]}, ${dateValue[5]}</time>`\n        \n        const zero = `Ehhh... I think the range between <b>${datetimeI}</b> and <b>${datetimeF}</b> It can only be humm... mandarin ?`\n        const positive = `between today <b>${datetimeI}</b> and <b>${datetimeF}</b> there is a  <b>${interval} days</b> gap.`\n        const negative = `between today <b>${datetimeF}</b> and <b>${datetimeI}</b> there is a  <b>${interval} days </b> gap.`\n        const neutre = `Between <b>${datetimeI}</b> and <b>${datetimeF}</b> there will be an interval of <b>${interval} days.</b>`\n\n        if (interval == 0) {\n            res.innerHTML = zero\n        } else {\n            if (page == \"oneDate\") {\n                if (dateValue[6]) { \n                    res.innerHTML = negative\n                } else {\n                    res.innerHTML = positive\n                }\n            } else {\n                res.innerHTML = neutre\n            } \n        }\n    }\n}","import formula from './formula.js' //  modulo que calcula intervals de tempo\nimport Central from './Central.js'\n\nconst central = new Central()\n\nfunction counterPage() {\n    let dateValue = central.autoDate()\n\n    dateValue = dateValue.map((element) => parseInt(element))\n\n    dateValue = central.timeline(dateValue)\n\n    let interval = formula(dateValue) // vai calcular o interval\n\n    central.response(interval, dateValue, \"oneDate\") // resposta final   \n\n    event.preventDefault()\n}\n\n\nfunction intervalPage() {\n    let dateValue = central.initalDate()\n\n    dateValue = dateValue.map((element) => parseInt(element))\n\n    dateValue = central.timeline(dateValue)\n\n    let interval = formula(dateValue) // vai calcular o interval\n\n    central.response(interval, dateValue, \"twoDate\") // resposta final   \n\n    event.preventDefault()\n}\n\nexport {counterPage, intervalPage}","export default class proximo {\n    constructor(currentDate, datas) {\n        this.holiday = this.holiday(currentDate, datas)\n    }\n\n    holiday(currentDate, datas) {\n        for (let holidayDate of datas) {\n            const holidayPoints = holidayDate[1] * 40 + holidayDate[0]\n            const currentPoints = currentDate[1] * 40 + currentDate[0]\n\n            if(holidayPoints >= currentPoints) {\n                return datas.indexOf(holidayDate) + 1\n            }\n        }\n        return 3\n    }\n\n}","import next from './next.js'\n\nexport default class holidayData {\n    constructor(req, currentDate) { // req = value do select que o usuario escolheu\n        this.date = this.data(req, currentDate) //  vai receber todos os data do array\n    }\n\n    // os data do feriado sÃ³ possui dia e mes.\n    holidaYear(holidayDate, currentDate) { // e esse metodo vai calcular o ano a parti da data atual\n        // expressÃ£o == se mes1 > que o mes2 || dia1 > que o dia2\n        if (currentDate[1] > holidayDate[1] || currentDate[1] == holidayDate[1] && currentDate[0] > holidayDate[0]) {\n            holidayDate[2] = currentDate[2] + 1 // entÃ£o o ano do feriado Ã© igual ao ano atual + 1\n        } else {\n            holidayDate[2] = currentDate[2]\n        }\n        return holidayDate // retornara a data completa\n    }\n\n    data(req, currentDate) { // metodo que mostra os data\n\n        const holidayDates = { //  dia e mes do feriado\n            1: [14, 2],\n            2: [17, 3],\n            3: [22, 3],\n            4: [8, 5],\n            5: [15, 6],\n            6: [4, 7],\n            7: [31, 10],\n            8: [22, 11],\n            9: [25, 12],\n            10: [31, 12],\n            11: [1, 1],\n            12: [12, 2],\n            13: [4, 4],\n            14: [1, 5],\n            15: [14, 6],\n            16: [21, 9],\n            17: [1, 10],\n        }\n\n        if (req == \"0\") {\n            let date = []\n            for (let key in holidayDates) {\n                date.push(holidayDates[key])\n            }\n            req = new next(currentDate, date).holiday\n        }\n\n        return [this.holidaYear(holidayDates[req], currentDate), req] //  vai descobrir qual o ano do feriado\n        // isso vai chamar o metodo com os data do mes escolhido e a data atual\n    }\n}","import holidayData from './data.js' //  modulo que mostra os dados do feriado\n\nimport Central from '../intervalo/Central.js'\nimport formula from '../intervalo/formula.js' //  modulo que calcula intervals\n\n\nconst button = document.querySelector('.card__button')\nconst date = new Date();\nconst central = new Central()\nconst res = document.querySelector(\".body__result\")\n\n\nexport default function holidayPage() {\n    const holiday = document.querySelector(\"#holiday\") // setar o feriado escolhido\n\n    const currentDate = [date.getDate(), date.getMonth() + 1, date.getFullYear()] // dia, mes e ano atual em um array\n    const holidayDate = new holidayData(holiday.value, currentDate).date // essa Ã© date completa do feriado\n\n    let dateValue = [currentDate[0], currentDate[1], currentDate[2], holidayDate[0][0], holidayDate[0][1], holidayDate[0][2]]\n\n    dateValue = central.timeline(dateValue, true)\n\n    let interval = formula(dateValue) // resultado em interval\n    if (interval < 0) interval *= (-1)\n\n    const month = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    \n    let dayName =  holidayDate[0][0]\n    let monthName = month[holidayDate[0][1] - 1]\n    let yearName = holidayDate[0][2]\n\n    const dateToHoliday = `<time datetime=\"${yearName}-${holidayDate[0][1]}-${dayName}\">${monthName} ${dayName}, ${yearName}</time> `\n    \n    const presentHoliday = `Congratulations visitor, today is <b> ${dateToHoliday} </b> day of <b> ${holiday.options[holidayDate[1]].text}</b>, and I bet you didn't even know that ksks .`\n    const futureHoliday = `The <b>${holiday.options[holidayDate[1]].text}</b> holiday is celebrated at <b> ${dateToHoliday} </b> and there are <b> ${interval} days </b> before it arrives.`\n\n    if (interval == 0) {\n        res.innerHTML = presentHoliday\n    } else {\n        res.innerHTML = futureHoliday\n    }\n}","\nimport conversionPage from './js/conversor/main.js' // import dos modulos main das paginas \nimport {\n    counterPage,\n    intervalPage\n} from './js/intervalo/main.js'\nimport holidayPage from './js/feriado/main.js'\n\n//  script da pagina de conversÃ£o de datas\ndocument.addEventListener(\"click\", (e) => {\n    if (e.target.id == \"converterButton\") {\n        conversionPage()\n    }\n})\n\n//  script da pagina de intervalos de inicio e fim\ndocument.addEventListener(\"submit\", (e) => {\n    if (e.target.id == \"formOne\") {\n        counterPage()\n    }\n})\n\n//  script da pagina de intervalos de inicio e fim\ndocument.addEventListener(\"submit\", (e) => {\n    if (e.target.id == \"formTwo\") {\n        intervalPage()\n    }\n})\n\n//  script da pagina de feriados\ndocument.addEventListener(\"click\", (e) => {\n    if(e.target.id == \"holidayButton\"){\n        holidayPage()\n    }\n})\n\n//  npm uninstall babel-core babel-loader babel-preset-es2015 babel-preset-stage-0 webpack-dev-middleware webpack-hot-middleware --save-dev","import data from './data.js' // ROTAS DANDO TUDO ERRADO\n\nexport default function formula(originalUnit, quantityUnit, resultUnit) {\n    const unitData = data(originalUnit, resultUnit)\n\n    let conversorNumerado = unitData[originalUnit]\n    let produtoNumerado = unitData[resultUnit]\n    let caso1 = produtoNumerado / (conversorNumerado * quantityUnit)\n\n    if (caso1 <= 1) {\n        produtoNumerado = conversorNumerado / produtoNumerado * quantityUnit\n\n        if (!Number.isInteger(produtoNumerado)) {\n            if (quantityUnit == 1) return `<b>${quantityUnit} ${originalUnit}</b> converted to <b>${resultUnit}s</b> is equal to ${produtoNumerado.toFixed(3)}...<b> ${resultUnit }s.</b>`\n            return `<b>${quantityUnit} ${originalUnit}s</b> converted to <b>${resultUnit}s</b> is equal to <b> ${produtoNumerado.toFixed(3)}... ${resultUnit}s.</b>`\n        }\n        //\n        if (quantityUnit == 1) return `<b>${quantityUnit} ${originalUnit}</b> converted to <b>${resultUnit}s</b> is equal to <b> ${Math.round(produtoNumerado)} ${resultUnit}s.</b>`\n        return `<b>${quantityUnit} ${originalUnit}s</b> conprodutoNumeradoverted to <b>${resultUnit}s</b> is equal to <b> ${Math.round(produtoNumerado)} ${resultUnit }s.</b>`\n    } else {\n        produtoNumerado = produtoNumerado / (conversorNumerado * quantityUnit)\n\n        if (!Number.isInteger(produtoNumerado)) {\n            if (quantityUnit == 1) return `<b>${quantityUnit} ${originalUnit}</b> converted to <b>${resultUnit}s</b> is equal to <b> 1/${produtoNumerado. toFixed(3)}... ${resultUnit}s.</b>`\n            return `${quantityUnit} <b>${originalUnit}s</b> converted to <b>${resultUnit}s</b> is equal to <b> 1/${produtoNumerado.toFixed(3)}. .. ${resultUnit}s.</b>`\n        }\n\n        if (quantityUnit == 1) return `<b>${quantityUnit} ${originalUnit}</b> converted to <b>${resultUnit}s</b> is equal to <b> 1/${Math. round(produtoNumerado) } ${resultUnit}s.</b>`\n        return `${quantityUnit} <b>${originalUnit}s</b> converted to <b>${resultUnit}s</b> is equal to <b> 1/${Math.round(produtoNumerado)} ${resultUnit}s.</b>`\n    } \n}","export default function uniDados(t1, t2) {\n    let conversor\n    let produto\n\n    function dados() {\n        this.nanosecond = 1,\n        this.microsecond = 1000,\n        this.millisecond = this.microsecond * 1000,\n        this.second = this.millisecond * 1000,\n        this.minute = this.second * 60,\n        this.hour = this.minute * 60,\n        this.day = this.hour * 24,\n        this.week = this.day * 7,\n        this.fortnight = this.day * 15,\n        this.month = this.week * 4.34524,\n        this.bimester = this.month * 2,\n        this.quarter = this.month * 3,\n        this.semester = this.quarter * 2,\n        this.year = this.semester * 2\n        this.decade = this.year * 10\n        this.century = this.decade * 10\n        this.millennium = this.century * 10\n    }\n    const dadosFormatado = new dados()\n\n    for (let medida in dadosFormatado) {\n        if (medida == t1) conversor = dadosFormatado[medida]\n        if (medida == t2) produto = dadosFormatado[medida]\n    }\n    \n    return {\n        [t1]: conversor,\n        [t2]: produto\n    }\n}"],"sourceRoot":""}